
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        self.first_element = None
        self.second_element = None
        self.prev_element = TreeNode(-float('inf'))

        def traverse(node):
            if not node:
                return
            
            traverse(node.left)

            if self.first_element is None and self.prev_element.val >= node.val:
                self.first_element = self.prev_element
            if self.first_element is not None and self.prev_element.val >= node.val:
                self.second_element = node

            self.prev_element = node

            traverse(node.right)

        traverse(root)

        self.first_element.val, self.second_element.val = self.second_element.val, self.first_element.val